using Pkg
using HDF5
Pkg.add("LaTeXStrings") 
Pkg.add("CairoMakie")

Pkg.add("Plots")
using Plots

#using LaTeXStrings
#using CairoMakie


#open and save the h5 file in the directory the script is in
#go into launch.json and settings.json and set it to the directory where the h5 file is

fname = "dimuons_hepfile.h5"
print("fname was run\n")

fid = h5open(fname, "r")
print("fid was run\n")

names = keys(fid)
print("names was run\n")

#############################

#Print the groups
print(names)

#Get the groups
muon1= fid["muon1"]
muon2= fid["muon2"]

#Print the datasets
print(keys(muon1))
print(keys(muon2))

#Get the datasets
E1 = muon1["e"][]
px1 = muon1["px"][]
py1 = muon1["py"][]
pz1 = muon1["pz"][]
charge1 = muon1["q"][]
print("muon1 dataset run\n")

E2 = muon2["e"][]
px2 = muon2["px"][]
py2 = muon2["py"][]
pz2 = muon2["pz"][]
charge2 = muon2["q"][]
print("muon2 dataset run\n")


###
# Challenge 1 - Classical mechanics
###
p= px1.^2
pmag1 = sqrt.(px1.^2 + py1.^2 + pz1.^2)
pmag2 = sqrt.(px2.^2 + py2.^2 + pz2.^2)

m1=(pmag1.^2)./(2*E1)
m2=(pmag2.^2)./(2*E2)

p1= histogram(m1, bins=1000, xlims=(-1,75), xlabel= "Mass of muon #1 (GeV/c^2)", color= :red, lc=:match)
p2= histogram(m2, bins=1000, xlims=(-1,75), xlabel= "Mass of muon #2 (GeV/c^2)", color= :blue, lc=:match)
Plots.plot(p1,p2,layout=(1,2), legend=false)
savefig("m1_and_m2.png")
print("m1 and m2 run")
###
#Part B
###

E = E1 + E2
px = px1 + px2
py = py1 + py2
pz = pz1 + pz2

charge = charge1 + charge2
pmag = sqrt.(px.^2 + py.^2 + pz.^2)
m = (pmag.^2)./(2*E)

mask_pos2= m==2
mask_neg2= m==-2
mask_0= m==0
print("masks run")

p1= histogram(m, bins=1000, xlims=(-1,50), xlabel= "All charge combinations", lc=:match)
print("p1 run")
p2= histogram(m[mask_pos2], bins=1000, xlims=(-1,50), xlabel= "2+", lc=:match)
print("p2 run")
Plots.plot(p1,p2,layout=(1,2), legend=false)
savefig("Part_B.png")
